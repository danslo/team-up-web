define(
  [ // The following items should always be loaded
    'angular-mocks', // app and angular-mocks both require angular,
    'app',           // so no need to load angular
    // Add all needed test files below
    'controllers/exampleTest',
    'modals/testModal',
    'modals/profile',
    'modals/slots',
    'services/dater',
    'services/store',
    'services/sloter',
    'services/stats',
    'services/teams',
    'services/teamup',
    'services/md5'
  ],
  function() {
    'use strict';

    // You can have multiple describe functions, each with its own tests
    describe('Example Test Controller', function () {

      // Current structure uses one module per category,
      // on which the controllers/directives/services/filters are bound.
      // These are defined and loaded in app.js
      beforeEach(
        module(
          'controllers',
          'services',
          'ngResource'
        )
      );

      afterEach(inject(function($httpBackend)
      {
        $httpBackend.verifyNoOutstandingExpectation();
        $httpBackend.verifyNoOutstandingRequest();
      }));

      var exampleCtrl,
          rootScope,
          scope,
          testModal,
          $q,
          $resource,
          $httpBackend,
          profile;


      // Initialize the controller and a mock scope
      beforeEach(
        inject
        (
          function (
            $controller,
            $rootScope,
            _TestModal_,
            _$q_,
            _$resource_,
            _$httpBackend_,
            _Profile_
          )
          {
            scope = $rootScope.$new();
            exampleCtrl = $controller('exampleTestCtrl', {
              $scope: scope
            });
            rootScope = $rootScope;
            testModal = _TestModal_;
            $q = _$q_;
            $resource = _$resource_;
            $httpBackend = _$httpBackend_;
            profile = _Profile_;
          }
        )
      );

      it('should assign a string to the scope', function () {
        expect(scope.exampleTestString).toBe('Controller testing works');
      });

      it('should check if the password is strong enough', function () {
        scope.passWord = 'dasd2135';
        scope.testLengthPassword();

        expect(scope.strength).toBe('strong');
      });

      it('should check if there is a permissionprofile', function () {
        console.log('testConfig.host', testConfig);
        var promise = testModal.getPermissionProfile(),
            jsonResponse  = {
              clientReports: true,
              clients: true,
              tasks: true,
              teamTelephoneBasic: true,
              teams: true
            },
            result = null;

        $httpBackend
            .whenGET(testConfig.host + 'acl')
            .respond(jsonResponse);

        promise.then(
            function(permissionData)
            {
              result = permissionData;
            },
            function(reason)
            {
              result = reason;
            }
          );

        $httpBackend.flush();

        expect(result.teamTelephoneBasic).toBe(true);
      });

      it("Should check if the logged user can't create a new member with the same teamlid-code",
        function()
        {
          var result = null,
              userId = 'henkie',
              pincode = 8701,
              currentUser = true;

          $httpBackend.expect(
            'GET',
            testConfig.host + 'node/' + userId + '/pincode_exists' +
             '?pincode=' + pincode + '&returnExistsWhenAssignedToUuid=' + currentUser,
            null
          ).respond(409);

          profile
            .pincodeExists(userId, pincode, currentUser)
            .then(
            function(checkResult)
            {
              result = checkResult;
            },
            function(error)
            {
              result = error;
            }
          );

          $httpBackend.flush();
          expect(result).toBe(false);
        }
      );
    });
  }
);